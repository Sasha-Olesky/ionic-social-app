angular.module('starter.dynamics', [])

.controller('dynamicsCtrl', function($scope, $ionicPlatform, $state, $timeout, $rootScope, Session,$ionicLoading,APIManager,ionicToast){

	$scope.$on('$ionicView.beforeEnter', function() {
		$scope.$emit('child', true);        
        
	});
    $scope.loadMore = function() {
        var url = 'get_posts';
        $scope.pageNo +=1;
        var data = {userid:Session.getSession('user').id, page:$scope.pageNo}
        APIManager.get(url, data).then(function(res) {
            angular.extend($scope.posts, $scope.posts,res.data.posts);
            $scope,more = res.data.more;
            $scope.commentfocus = new Array($scope.posts.length);
            $scope.collapse = new Array($scope.posts.length);
            initCollapseValue();
        });
    };
    initCollapseValue = function(){
      for(i=0; i<$scope.collapse.length;i++)
        $scope.collapse[i] = false;
    };
    $scope.likePost = function(index,post_id){
      var url = "like_post";
      var data={postid:post_id,userid:Session.getSession('user').id};
      $ionicLoading.show();
      APIManager.get(url, data).then(function(res) {
            $scope.posts[index].like_users = res.data.like_users;
            $scope.posts[index].is_like = true;
            $ionicLoading.hide();
      });
    };
    $scope.dislikePost = function(index,post_id){
        var url = "dislike_post";
        var data={postid:post_id,userid:Session.getSession('user').id};
        $ionicLoading.show();
        APIManager.get(url, data).then(function(res) {
            $scope.posts[index].like_users = res.data.like_users;
            $scope.posts[index].is_like = false;
            $ionicLoading.hide();
        });
    };

    $scope.send_comment = function(p_id, i) {
        if ($scope.posts[i].comment == '') {
            ionicToast.show('请输入内容', 'middle', false, 1500);
            return false;
        }
        url = 'insert_comment';
        alert(Session.getSession('user').id);
        data = {postid: p_id, userid: Session.getSession('user').id, comment: $scope.posts[i].comment};
        APIManager.post(url, data).then(function (res) {
            $scope.posts[i].comments = res.data.comments;

        });
    };
    $scope.activeComment = function(index){
        $scope.commentfocus[index] = true;
    };

    $scope.colloseUp = function(index){
        $scope.collapse[index] = true;
    };
    $scope.colloseDown = function(index){
        $scope.collapse[index] = false;
    };
})
.directive('focusMe', function($timeout) {
    return {
        scope: { trigger: '=focusMe' },
        link: function(scope, element) {
            scope.$watch('trigger', function(value) {
                if(value === true) {
                    $timeout(function() {
                        element[0].focus();
                        scope.trigger = false;
                    });
                }
            });
        }
    };
})
.directive('autoCollpaseWhen', function() {
    return {
        scope: { trigger: '=autoCollpaseWhen' },
        link: function(scope, element) {
            scope.$watch('trigger', function(value) {
                if(value === true){
                    element.css('height','111px');
                }else{
                    element.css('height','100%');
                }
            });
        }
    }

    $scope.loadMore = function() {
        var url = 'get_posts';
        $scope.pageNo +=1;
        var data = {userid:Session.getSession('user').id, page:$scope.pageNo}
        APIManager.get(url, data).then(function(res) {
            angular.extend($scope.posts, $scope.posts,res.data.posts);
            $scope,more = res.data.more;
            $scope.commentfocus = new Array($scope.posts.length);
            $scope.collapse = new Array($scope.posts.length);
            initCollapseValue();
        });
    };
    initCollapseValue = function(){
      for(i=0; i<$scope.collapse.length;i++)
        $scope.collapse[i] = false;
    };
    $scope.likePost = function(index,post_id){
      var url = "like_post";
      var data={postid:post_id,userid:Session.getSession('user').id};
      $ionicLoading.show();
      APIManager.get(url, data).then(function(res) {
            $scope.posts[index].like_users = res.data.like_users;
            $scope.posts[index].is_like = true;
            $ionicLoading.hide();
      });
    };
    $scope.dislikePost = function(index,post_id){
        var url = "dislike_post";
        var data={postid:post_id,userid:Session.getSession('user').id};
        $ionicLoading.show();
        APIManager.get(url, data).then(function(res) {
            $scope.posts[index].like_users = res.data.like_users;
            $scope.posts[index].is_like = false;
            $ionicLoading.hide();
        });
    };

    $scope.send_comment = function(p_id, i) {
        if ($scope.posts[i].comment == '') {
            ionicToast.show('请输入内容', 'middle', false, 1500);
            return false;
        }
        url = 'insert_comment';
        alert(Session.getSession('user').id);
        data = {postid: p_id, userid: Session.getSession('user').id, comment: $scope.posts[i].comment};
        APIManager.post(url, data).then(function (res) {
            $scope.posts[i].comments = res.data.comments;
        });
    };
    $scope.activeComment = function(index){
        $scope.commentfocus[index] = true;
    };

    $scope.colloseUp = function(index){
        $scope.collapse[index] = true;
    };
    $scope.colloseDown = function(index){
        $scope.collapse[index] = false;
    };
})
.directive('focusMe', function($timeout) {
    return {
        scope: { trigger: '=focusMe' },
        link: function(scope, element) {
            scope.$watch('trigger', function(value) {
                if(value === true) {
                    $timeout(function() {
                        element[0].focus();
                        scope.trigger = false;
                    });
                }
            });
        }
    };
})
.directive('autoCollpaseWhen', function() {
    return {
        scope: { trigger: '=autoCollpaseWhen' },
        link: function(scope, element) {
            scope.$watch('trigger', function(value) {
                if(value === true){
                    element.css('height','111px');
                }else{
                    element.css('height','100%');
                }
            });
        }
    }	
	
	$scope.user = Session.getSession('user');
	
	window.addEventListener('native.keyboardshow', keyboardShowHandler);
	window.addEventListener('native.keyboardhide', keyboardHideHandler);
	$ionicPlatform.registerBackButtonAction(function () {		
		Session.exitConfirm($scope);	
	},100);
	
	if ($state.current.name == 'tab.dynamics') {	
		$scope.show_footer = {
			value : false,
			click_send : false
		};
		$scope.cur_post = {
			sel_id : 0,
			sel_index : 0
		}
		var comment = document.getElementById('say_something');	
		$scope.hide_say = function() {
			if ($scope.show_footer.click_send) {
				comment.focus();
				$scope.show_footer.click_send = false;
				return false;
			}
			$scope.show_footer.value = false;			
		};
		$scope.send_comment = function() {	
			if (comment.value == '') {
				ionicToast.show('请输入内容', 'middle', false, 1500);
				$scope.show_footer.click_send = true;
				return false;
			}
			var url = 'insert_comment';
			var data = {postid:$scope.cur_post.sel_id, userid:$scope.user.id, comment:comment.value};
			APIManager.post(url, data).then(function (res){						
				$scope.cur_post.posts[$scope.cur_post.sel_index].comments = res.data.comments;
				comment.value = '';
			});
		};
		if ($scope.user.id !== $scope.personal_id) {
			var url = 'set_visitor';
			var data = {userid:$scope.user.id, tid:$scope.personal_id};
			APIManager.get(url, data);
		}
		function keyboardShowHandler(e){}
		function keyboardHideHandler(e){
			comment.blur();
			$scope.show_footer.value = false;
		}
	}	
	
	if ($state.current.name == 'tab.dynamics.square') {
		$scope.show_footer.value = false;
		var page = 1;
		var url = 'get_posts';
		var data = {userid:$scope.user.id, page:page};
		$ionicLoading.show();
		APIManager.get(url, data).then(function (res){
			$scope.cur_post.posts = res.data.posts;			
			$scope.more = res.data.is_more;			
			$ionicLoading.hide();
		});
		
		$scope.loadMore = function() {
			page++;
			url = 'get_posts';
			data = {userid:$scope.user.id, page:page};
			$ionicLoading.show();
			APIManager.get(url, data).then(function(res) {
				$scope.cur_post.posts = $scope.cur_post.posts.concat(res.data.posts);
				$scope.$broadcast('scroll.infiniteScrollComplete');
				$scope.more = res.data.is_more;
				$ionicLoading.hide();
			});
		};
		
		var comment = document.getElementById('say_something');
		$scope.start_comment = function(p_id, i) {			
			$scope.cur_post.sel_id = p_id;
			$scope.cur_post.sel_index = i;
			$scope.show_footer.value = true;
			$timeout(function () {
				comment.focus();
				$scope.show_footer.click_send = false;
			}, 0);
		};
		$scope.like_post = function(p_id, i) {
			if ($scope.cur_post.posts[i].is_like) {
				url = 'dislike_post';
			} else {
				url = 'like_post';
			}
			var data = {postid:p_id, userid:$scope.user.id};
			APIManager.get(url, data).then(function (res){
				if (url == 'dislike_post') {
					var ii = -1;
					$scope.cur_post.posts[i].like_users.forEach(function(item, index) {
						if (item.id == $scope.user.id) {
							ii = index;
							return;
						}
					});
					if (ii != -1) {
						$scope.cur_post.posts[i].like_users.splice(ii, 1);
					}
				} else {
					$scope.cur_post.posts[i].like_users.push({id:$scope.user.id, photo:$scope.user.photo});
				}
				$scope.cur_post.posts[i].is_like = !$scope.cur_post.posts[i].is_like;
			});
		};	
	}
});